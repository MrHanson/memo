(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{512:function(e,_,v){"use strict";v.r(_);var t=v(6),r=Object(t.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"chrome-主要工作进程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#chrome-主要工作进程"}},[e._v("#")]),e._v(" chrome 主要工作进程")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("浏览器进程")]),e._v("。主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("渲染进程")]),e._v("。")]),e._v(" "),v("blockquote",[v("p",[e._v("核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")])]),e._v(" "),v("ul",[v("li",[e._v("同一站点（"),v("strong",[e._v("相同")]),e._v("的"),v("em",[e._v("协议")]),e._v("和"),v("em",[e._v("根域名")]),e._v("）会复用渲染进程")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("GPU 进程")]),e._v("。其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("网络进程")]),e._v("。主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。插件进程。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("插件进程")]),e._v("。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")])])]),e._v(" "),v("h2",{attrs:{id:"浏览器请求-响应"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器请求-响应"}},[e._v("#")]),e._v(" 浏览器请求&响应")]),e._v(" "),v("p",[v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/1b/6c/1b49976aca2c700883d48d927f48986c.png",alt:"request & response"}})]),e._v(" "),v("h3",{attrs:{id:"浏览器发起-http-请求流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器发起-http-请求流程"}},[e._v("#")]),e._v(" 浏览器发起 HTTP 请求流程")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("构建请求")])]),e._v(" "),v("li",[v("p",[e._v("查找缓存")]),e._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("Http cache"),v("OutboundLink")],1)])])]),e._v(" "),v("li",[v("p",[e._v("准备 IP 地址和端口")]),e._v(" "),v("ul",[v("li",[e._v("DNS 域名映射")]),e._v(" "),v("li",[e._v("HTTP 默认端口 80")])])]),e._v(" "),v("li",[v("p",[e._v("等待 TCP 队列")]),e._v(" "),v("ul",[v("li",[e._v("Chrome 机制：同一域名最多建立 6 个 TCP 连接，超过限制的请求则会进入等待状态")])])]),e._v(" "),v("li",[v("p",[e._v("TCP 连接")])]),e._v(" "),v("li",[v("p",[e._v("发送 HTTP 请求")]),e._v(" "),v("ul",[v("li",[e._v("请求行\n"),v("ul",[v("li",[e._v("URL")]),e._v(" "),v("li",[e._v("method")])])]),e._v(" "),v("li",[e._v("请求头\n"),v("ul",[v("li",[e._v("Connection: keep-alive ("),v("em",[e._v("保持 TCP 连接可以省去下次请求时需要建立连接的时间，提升资源加载速度")]),e._v(")")]),e._v(" "),v("li",[e._v("Content-Type")]),e._v(" "),v("li",[e._v("method")]),e._v(" "),v("li",[v("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("Http cache"),v("OutboundLink")],1)]),e._v(" "),v("li",[e._v("Cookie")]),e._v(" "),v("li",[e._v("User-Agent")]),e._v(" "),v("li",[e._v("....")])])]),e._v(" "),v("li",[e._v("请求体\n"),v("ul",[v("li",[e._v("payload/form-data")]),e._v(" "),v("li",[e._v("text")]),e._v(" "),v("li",[e._v("....")])])])])])]),e._v(" "),v("h3",{attrs:{id:"服务端响应请求"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#服务端响应请求"}},[e._v("#")]),e._v(" 服务端响应请求")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("响应头")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("Status Code")])]),e._v(" "),v("li",[v("p",[e._v("Cors-header")])]),e._v(" "),v("li",[v("p",[e._v("Set-Cookie 服务端对 cookie 进行写入操作")])]),e._v(" "),v("li",[v("p",[e._v("Content-Type")]),e._v(" "),v("blockquote",[v("p",[e._v("告诉浏览器响应的数据格式，常见格式如下：")])]),e._v(" "),v("ul",[v("li",[e._v("text/plain")]),e._v(" "),v("li",[e._v("application/json")]),e._v(" "),v("li",[e._v("...")])])])])]),e._v(" "),v("li",[v("p",[e._v("响应体（响应数据）")])])]),e._v(" "),v("h2",{attrs:{id:"q-a"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q-a"}},[e._v("#")]),e._v(" Q&A")]),e._v(" "),v("h3",{attrs:{id:"从输入-url-到页面展示-中间发生了什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#从输入-url-到页面展示-中间发生了什么"}},[e._v("#")]),e._v(" 从输入 URL 到页面展示，中间发生了什么")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("根据用户输入判断是信息搜索（调用搜索引擎进行搜索）或者是符合 URL 规则的内容")])]),e._v(" "),v("li",[v("p",[e._v("用户敲击回车，触发浏览器的"),v("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event",target:"_blank",rel:"noopener noreferrer"}},[v("code",[e._v("beforeunload")]),v("OutboundLink")],1),e._v("事件，没有监听该事件或同意后续流程，标签页进入加载状态")])]),e._v(" "),v("li",[v("p",[v("em",[e._v("浏览器进程")]),e._v("通过"),v("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B%E9%96%93%E9%80%9A%E8%A8%8A",target:"_blank",rel:"noopener noreferrer"}},[e._v("进程间通信"),v("OutboundLink")],1),e._v(" IPC 把 URL 请求发送至"),v("em",[e._v("网络进程")]),e._v("，由"),v("em",[e._v("网络进程")]),e._v("发起网络请求。一般会先进行缓存资源查找，没有对应的资源再请求。若用户输入的是域名，则会进行 DNS 解析，获取 IP，然后利用 IP 和服务器建立 TCP 连接，默认发送 HTTP 请求")])]),e._v(" "),v("li",[v("p",[e._v("浏览器会为每个页面分配一个渲染进程，根据响应头的"),v("code",[e._v("Content-Type")]),e._v("，做好准备。"),v("strong",[e._v("同一站点（"),v("strong",[e._v("相同")]),e._v("的"),v("em",[e._v("协议")]),e._v("和"),v("em",[e._v("根域名")]),e._v("）会服用同一个渲染进程")])])]),e._v(" "),v("li",[v("p",[v("em",[e._v("渲染进程")]),e._v("准备好后，会进行“"),v("strong",[e._v("提交文档")]),e._v("”，即通知"),v("em",[e._v("浏览器进程")]),e._v("清理当前旧文档，然后"),v("em",[e._v("浏览器进程")]),e._v("发出“确认提交”的信息给"),v("em",[e._v("渲染进程")]),e._v("，"),v("em",[e._v("浏览器进程")]),e._v("更新界面状态如安全状态、地址栏 URL、前进后退历史状态，并更新 Web 界面")])]),e._v(" "),v("li",[v("p",[v("em",[e._v("渲染进程")]),e._v("开始页面解析和子资源加载")]),e._v(" "),v("ol",[v("li",[e._v("构建"),v("strong",[e._v("DOM 树")])]),e._v(" "),v("li",[e._v("样式计算（Recalculate Style）；遵循"),v("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance",target:"_blank",rel:"noopener noreferrer"}},[e._v("CSS 层叠上下文和属性继承"),v("OutboundLink")],1),e._v("规则，合成"),v("strong",[e._v("UserAgent 默认样式")]),e._v("和"),v("strong",[e._v("自定义样式")]),e._v("为"),v("strong",[e._v("ComputedStyle")]),e._v("，构建"),v("strong",[e._v("CSS 树")])]),e._v(" "),v("li",[e._v("布局阶段。将"),v("strong",[e._v("DOM 树")]),e._v("和"),v("strong",[e._v("CSS 树")]),e._v("合成"),v("strong",[e._v("布局树")]),e._v("(Layout Tree)")])]),e._v(" "),v("p",[v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/8e/0e/8e48b77dd48bdc509958e73b9935710e.png",alt:"chrome render"}})]),e._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[v("p",[e._v("对布局树进行分层，生成"),v("strong",[e._v("分层树")]),e._v(" (Layer)")])]),e._v(" "),v("li",[v("p",[e._v("为每个图层生成"),v("strong",[e._v("绘制列表")]),e._v("（Paint），并将其提交到合成线程。")])]),e._v(" "),v("li",[v("p",[e._v("合成线程将图层分成"),v("strong",[e._v("图块")]),e._v("（Tiles），并在"),v("strong",[e._v("光栅化线程池")]),e._v("（Raster task）中将图块转换成位图。若栅格化操作使用了 GPU，则会使用"),v("strong",[e._v("GPU 线程")]),e._v("进行跨进程操作")])]),e._v(" "),v("li",[v("p",[e._v("合成线程发送绘制图块命令"),v("strong",[e._v("DrawQuad")]),e._v("给浏览器进程。")])]),e._v(" "),v("li",[v("p",[e._v("浏览器进程根据 DrawQuad 消息生成页面，并显示到显示器上。")])])])])]),e._v(" "),v("h3",{attrs:{id:"reflow-重排-与-repaint-重绘-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#reflow-重排-与-repaint-重绘-的区别"}},[e._v("#")]),e._v(" Reflow（重排） 与 Repaint（重绘）的区别")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("Reflow")]),e._v(" "),v("p",[v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/b3/e5/b3ed565230fe4f5c1886304a8ff754e5.png",alt:"Reflow"}})])]),e._v(" "),v("li",[v("p",[e._v("Repaint "),v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/3c/03/3c1b7310648cccbf6aa4a42ad0202b03.png",alt:"Repaint"}})])]),e._v(" "),v("li",[v("p",[e._v("直接合成 "),v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/02/2c/024bf6c83b8146d267f476555d953a2c.png",alt:"Mix"}})])])]),e._v(" "),v("h2",{attrs:{id:"参考文献"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[e._v("#")]),e._v(" 参考文献")]),e._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://time.geekbang.org/column/intro/216",target:"_blank",rel:"noopener noreferrer"}},[e._v("浏览器工作原理与实践"),v("OutboundLink")],1)]),e._v(" "),v("li",[e._v("MDN")])])])}),[],!1,null,null,null);_.default=r.exports}}]);